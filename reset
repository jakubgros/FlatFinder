[38;5;11m[0m[38;5;11m───────────────────────────────────────────────────────────────────────────────
[38;5;11mmodified: src/comparators/comparison_rules/comparison_rules_container.py
[38;5;11m───────────────────────────────────────────────────────────────────────────────
[1;35m@ src/comparators/comparison_rules/comparison_rules_container.py:15 @[1m[38;5;146m class ComparisonRulesContainer:[0m
         requested_type_rules = self.all_rules.get(rule_type, [])[m
 [m
         return any(rule.does_apply(subject) for rule in requested_type_rules)[m
[7m[1;32m [m
[1;32m+[m[1;32m    def get_filtered(self, filter):[m
[1;32m+[m[1;32m        as_list = [rule for rules_of_particular_type in self.all_rules.values() for rule in rules_of_particular_type][m
[1;32m+[m[1;32m        filtered = [rule for rule in as_list if filter(rule)][m
[1;32m+[m[1;32m        filtered_container = self.__init__(filtered)[m
[1;32m+[m[1;32m        return filtered_container[m
\ No newline at end of file[m
[38;5;11m[0m[38;5;11m───────────────────────────────────────────────────────────────────────────────
[38;5;11mmodified: src/comparators/morphologic_comparator.py
[38;5;11m───────────────────────────────────────────────────────────────────────────────
[1;35m@ src/comparators/morphologic_comparator.py:19 @[1m[38;5;146m class MorphologicComparator:[0m
         self.title_case_sensitive = title_case_sensitive[m
         self.rules = comparison_rules[m
 [m
[1;31m-    def _is_case_sensitive_comparison(self, actual_word[m[1;31;48;5;52m[m[1;31m):[m
[1;32m+    def _is_case_sensitive_comparison(self, actual_word[m[1;32;48;5;22m, rules[m[1;32m):[m
         force_case_insensitivity = self.ignore_case_sensitivity_if_actual_upper_case and actual_word.isupper() \[m
[1;31m-                                   or [m[1;31;48;5;52mself.rules and self.[m[1;31mrules.does_apply(actual_word,[m
[1;31m-                                                                 [m[1;31;48;5;52m          [m[1;31mComparisonRuleType.FORCE_CASE_INSENSITIVITY)[m
[1;32m+                                   or [m[1;32;48;5;22mrules and [m[1;32mrules.does_apply(actual_word,[m
[1;32m+                                                                 [m[1;32;48;5;22m[m[1;32mComparisonRuleType.FORCE_CASE_INSENSITIVITY)[m
 [m
         return not force_case_insensitivity and self.title_case_sensitive[m
 [m
[1;35m@ src/comparators/morphologic_comparator.py:38 @[1m[38;5;146m class MorphologicComparator:[0m
         expected_base_form = [analyser.get_base_form(word) for word in expected_split][m
         actual_base_form = [analyser.get_base_form(word) for word in actual_split][m
 [m
[1;32m+[m[1;32m        # TOOD change to filter on len(actual_split) == len(split_on_special_characters(subject)) for subject in self.rules[m
[1;32m+[m[1;32m        if len(actual_split) == 1 and self.rules:[m
[1;32m+[m[1;32m            rules = self.rules.get_filtered(lambda rule: rule.rule_type != ComparisonRuleType.FORCE_CASE_INSENSITIVITY)[m
[1;32m+[m[1;32m        else:[m
[1;32m+[m[1;32m            rules = self.rules[m
[7m[1;32m [m
         for actual_word_base, expected_word_base, actual_word_original, expected_word_original \[m
                 in zip(actual_base_form, expected_base_form, actual_split, expected_split):[m
 [m
[1;31m-            test_case_sensitivity = self._is_case_sensitive_comparison(actual_word_original[m[1;31;48;5;52m[m[1;31m)[m
[1;32m+            test_case_sensitivity = self._is_case_sensitive_comparison(actual_word_original[m[1;32;48;5;22m, rules[m[1;32m)[m
             are_not_equal = actual_word_base.isdisjoint(expected_word_base)[m
 [m
             if are_not_equal \[m
[38;5;11m[0m[38;5;11m───────────────────────────────────────────────────────────────────────────────
[38;5;11mmodified: tests/test_address_extractor.py
[38;5;11m───────────────────────────────────────────────────────────────────────────────
[1;35m@ tests/test_address_extractor.py:58 @[1m[38;5;146m class AddressExtractorTest(unittest.TestCase):[0m
         for test_case in test_cases:[m
             test_case['extra_matches'] = set()[m
 [m
[1;31m-        test_cases[2]['extra_matches'] = {'Osiedle'}[m
         test_cases[5]['extra_matches'] = {'Mogilska'}[m
         test_cases[9]['extra_matches'] = {'Kazimierz', 'Bednarska'}[m
[1;31m-        test_cases[11]['extra_matches'] = {'Osiedle', 'Szybka'}[m
[1;31m-        test_cases[12]['extra_matches'] = {'Osiedle'}[m
[1;32m+[m[1;32m        test_cases[11]['extra_matches'] = {'Szybka'}[m
         test_cases[13]['extra_matches'] = {'Bolesława Komorowskiego', 'Krakowska'}[m
[1;31m-        test_cases[15]['extra_matches'] = {'Wrocławska', 'Władysława Łokietka'[m[1;31;48;5;52m, 'Osiedle'[m[1;31m}[m
[1;31m-        test_cases[16]['extra_matches'] = {'Wrocławska 2', 'Władysława Łokietka'[m[1;31;48;5;52m, 'Osiedle'[m[1;31m}[m
[1;32m+        test_cases[15]['extra_matches'] = {'Wrocławska', 'Władysława Łokietka'[m[1;32;48;5;22m[m[1;32m}[m
[1;32m+        test_cases[16]['extra_matches'] = {'Wrocławska 2', 'Władysława Łokietka'[m[1;32;48;5;22m[m[1;32m}[m
         test_cases[20]['extra_matches'] = {'Zakrzówek', 'Czerwone Maki'}[m
         test_cases[21]['extra_matches'] = {'Mogilska', 'Przy Rondzie', 'Złota'}[m
[1;31m-        test_cases[22]['extra_matches'] = {'[m[1;31;48;5;52mOsiedle', '[m[1;31mSeweryna Udzieli'}[m
[1;32m+        test_cases[22]['extra_matches'] = {'[m[1;32;48;5;22m[m[1;32mSeweryna Udzieli'}[m
         # TODO END REMOVE[m
 [m
         return test_cases[m
[1;35m@ tests/test_address_extractor.py:350 @[1m[38;5;146m class AddressExtractorTest(unittest.TestCase):[0m
             *_, found_address = extractor("Duże osiedle.")[m
             self.assertNotIn("Osiedle", [match.location for match in found_address.all])[m
 [m
[1;31m-    @unittest.skip[m
     def test_temp(self):  # TODO remove[m
         import logging[m
         logging.root.setLevel(logging.NOTSET)[m
 [m
         all_test_cases = self._load_regression_cases()[m
[1;31m-        flat = all_test_cases[[m[1;31;48;5;52m23[m[1;31m][m
[1;32m+        flat = all_test_cases[[m[1;32;48;5;22m6[m[1;32m][m
 [m
         extractor = AddressExtractor(address_provider, excluded_contexts=[[m
             FirstWordOfSentenceContext(),[m
